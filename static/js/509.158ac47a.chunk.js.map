{"version":3,"file":"static/js/509.158ac47a.chunk.js","mappings":"6OACA,EAAiC,yCAAjC,EAA+E,6B,SCGlEA,EAAmB,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAEzBC,GAAWC,EAAAA,EAAAA,MACjB,OACI,eAAIC,UAAWC,EAAf,SACKJ,EAAcK,KAAI,gBAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,MAAOC,EAAd,EAAcA,YAAd,OACf,yBACI,UAAC,KAAD,CAAeC,GAAE,kBAAaH,GAAMI,MAAO,CAAEC,KAAMV,GAAnD,WACI,gBAAKE,UAAWC,EAAoBQ,IAAKL,EAAOM,IAAG,UAPpD,oCAOoD,OAAkBL,MACrE,0BAAOD,MAFAD,IADNA,EADM,KAU9B,E,iBCbYQ,EAAW,mCAAG,WAAOC,GAAP,uFAECC,EAAAA,GAAAA,IAAA,UANX,+BAMW,kCALZ,mCAKY,kBACmCD,IAC1DE,OAAM,SAAAC,GACL,OAAO,IAAIC,MAAMD,EAAME,QACxB,IANsB,cAEnBC,EAFmB,yBAQlBA,GARkB,2CAAH,sDCLxB,EAA+B,iCAA/B,EAA6E,+BAA7E,EAAwH,8B,SCQzG,SAASC,IAAU,IAAD,EAE7B,GAA0CC,EAAAA,EAAAA,UAAS,IAAnD,eAAOvB,EAAP,KAAsBwB,EAAtB,KACA,GAA0BD,EAAAA,EAAAA,UAAS,IAAnC,eAAOE,EAAP,KAAcC,EAAd,KACA,GAAwCC,EAAAA,EAAAA,IAAgB,IAAxD,eAAOC,EAAP,KAAqBC,EAArB,KACMd,EAAM,UAAGa,EAAaE,IAAI,iBAApB,QAAiC,GAC7C,GAA4BP,EAAAA,EAAAA,UAAS,QAArC,eAAOQ,EAAP,KAAeC,EAAf,MAEAC,EAAAA,EAAAA,YAAU,WACN,GAAKlB,EAAL,CAIA,IAAMmB,EAAmB,mCAAG,oGAEpBF,EAAU,WAFU,SAIClB,EAAYC,GAJb,OAIdoB,EAJc,OAMpBH,EAAU,YACVR,EAAiBW,EAAOC,KAAKC,SAE7BC,OAAOC,SAAS,CACZC,IAAKC,SAASC,gBAAgBC,aAC9BC,SAAU,WAXM,kDAcpBZ,EAAU,YAdU,0DAAH,qDAkBzBE,GApBC,CAqBJ,GAAE,CAACnB,IAWJ,OACI,iBAAKZ,UAAWC,EAAhB,WAEI,kBAAMyC,SAVS,SAAAC,GACnBA,EAAEC,iBACF,IAAQC,EAAUF,EAAEG,OAAOC,SAASzB,MAA5BuB,MAEAnB,EAARmB,EAAwB,CAAEjC,OAAQiC,GAA2B,CAAC,EACjE,EAKO,WACI,kBACI7C,UAAWC,EACX+C,KAAK,OACLC,aAAa,MACbC,WAAS,EACTC,YAAY,eACZ,aAAW,SACXC,KAAK,QACLP,MAAOvB,EACP+B,SAtBO,SAAAV,GAAC,OAAIpB,EAASoB,EAAEG,OAAOD,MAAtB,KAuBZ,mBAAQ7C,UAAWC,EAAe+C,KAAK,SAAvC,uBAGHnD,EAAcyD,OAAS,GACpB,4BACI,SAAC1D,EAAD,CAAkBC,cAAeA,IACrB,YAAX+B,IAAwB,SAAC2B,EAAA,EAAD,QAE5B,yGAKhB,C","sources":["webpack://react-homework-template/./src/components/MoviesSearchList/MoviesSearchList.module.css?457d","components/MoviesSearchList/MoviesSearchList.jsx","services/fetchQuery.js","webpack://react-homework-template/./src/pages/Movies/MoviesPage.module.css?251f","pages/Movies/MoviesPage.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"movieSearchImg\":\"MoviesSearchList_movieSearchImg__MA3t5\",\"ul\":\"MoviesSearchList_ul__1mnKC\"};","import { Link, useLocation } from 'react-router-dom';\nimport css from '../MoviesSearchList/MoviesSearchList.module.css';\nimport PropTypes from 'prop-types';\n\nexport const MoviesSearchList = ({ movieBySearch }) => {\n    const IMAGE_PATH = \"https://image.tmdb.org/t/p/w500/\";\n    const location = useLocation();\n    return (\n        <ul className={css.ul}>\n            {movieBySearch.map(({ id, title, poster_path }) => (\n                <li key={id}>\n                    <Link key={id} to={`/movies/${id}`} state={{ from: location }}>\n                        <img className={css.movieSearchImg} alt={title} src={`${IMAGE_PATH}${poster_path}`} />\n                        <span>{title}</span>\n                    </Link>\n                </li>\n            ))}\n        </ul>\n    )\n}\n\nMoviesSearchList.propTypes = {\n    movieBySearch: PropTypes.arrayOf(\n        PropTypes.shape({\n            id: PropTypes.number.isRequired,\n            title: PropTypes.string.isRequired,\n            poster_path: PropTypes.string.isRequired\n        })\n    )\n}","import axios from 'axios';\n\nconst BASE_URL = 'https://api.themoviedb.org/3';\nconst API_KEY = '7ffdfa152a9c960018794573fb7e1fc4'\n\n\nexport const fetchSearch = async (search) => {\n\n  const fetchResult = await axios\n    .get(`${BASE_URL}/search/movie/?api_key=${API_KEY}&query=${search}`)\n    .catch(error => {\n      return new Error(error.message);\n    });\n\n  return fetchResult;\n};\n\n\n","// extracted by mini-css-extract-plugin\nexport default {\"moviesSearch\":\"MoviesPage_moviesSearch__TSYQU\",\"searchForm\":\"MoviesPage_searchForm__mw95R\",\"searchBtn\":\"MoviesPage_searchBtn__avbS7\"};","import { MoviesSearchList } from \"components/MoviesSearchList/MoviesSearchList\";\nimport { useEffect } from \"react\";\nimport { useState } from \"react\"\nimport { useSearchParams } from \"react-router-dom\";\nimport { fetchSearch } from '../../services/fetchQuery'\nimport css from '../Movies/MoviesPage.module.css';\n// import toast, { Toaster } from 'react-hot-toast';\nimport Loader from \"components/Loader/Loader\";\n\nexport default function Movies() {\n\n    const [movieBySearch, setMovieBySearch] = useState([]);\n    const [query, setQuery] = useState('');\n    const [searchParams, setSearchParams] = useSearchParams('');\n    const search = searchParams.get('search') ?? '';\n    const [status, setStatus] = useState('idle');\n\n    useEffect(() => {\n        if (!search) {\n            return;\n        }\n\n        const fetchMoviesBySearch = async () => {\n            try {\n                setStatus('pending');\n\n                const movies = await fetchSearch(search);\n\n                setStatus('resolved');\n                setMovieBySearch(movies.data.results);\n\n                window.scrollTo({\n                    top: document.documentElement.scrollHeight,\n                    behavior: 'smooth',\n                });\n            } catch (e) {\n                setStatus('rejected');\n                // return toast.e('upps')\n            }\n        }\n        fetchMoviesBySearch()\n    }, [search]);\n\n    const handelOnChange = e => setQuery(e.target.value)\n\n    const handelOnSubmit = e => {\n        e.preventDefault();\n        const { value } = e.target.elements.query;\n\n        value ? setSearchParams({ search: value }) : setSearchParams({})\n    }\n\n    return (\n        <div className={css.moviesSearch}>\n\n            <form onSubmit={handelOnSubmit} >\n                <input \n                    className={css.searchForm}\n                    type=\"text\"\n                    autoComplete=\"off\"\n                    autoFocus\n                    placeholder=\"Search movie\"\n                    aria-label=\"search\"\n                    name=\"query\"\n                    value={query}\n                    onChange={handelOnChange} />\n                <button className={css.searchBtn} type=\"submit\">Search</button>\n            </form>\n\n            {movieBySearch.length > 0 ? (\n                <div>\n                    <MoviesSearchList movieBySearch={movieBySearch} />\n                    {status === 'pending' && <Loader />}\n                </div>\n            ) : (<h2>Please write the name of film or check is the entered name of film currect</h2>)}\n\n            {/* <Toaster /> */}\n        </div>\n    )\n}"],"names":["MoviesSearchList","movieBySearch","location","useLocation","className","css","map","id","title","poster_path","to","state","from","alt","src","fetchSearch","search","axios","catch","error","Error","message","fetchResult","Movies","useState","setMovieBySearch","query","setQuery","useSearchParams","searchParams","setSearchParams","get","status","setStatus","useEffect","fetchMoviesBySearch","movies","data","results","window","scrollTo","top","document","documentElement","scrollHeight","behavior","onSubmit","e","preventDefault","value","target","elements","type","autoComplete","autoFocus","placeholder","name","onChange","length","Loader"],"sourceRoot":""}